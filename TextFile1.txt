
---------------------------------------  Employee Related Start -----------------------------------------
create table LoginCredit_1290881(
eid int primary key identity(10000,1),
etype varchar(20) check (etype='NAE' or etype='CT'),
uname varchar(20) unique,
pwd varchar(20),
timestamp
)

drop table LoginCredit_1290881

insert into LoginCredit_1290881(etype,uname, pwd) values('NAE','chandu', 'chandu123')
insert into EmpDetails_1290881 values('chandra mohan jha', 'NAE', 'M', 10000)

insert into LoginCredit_1290881(etype,uname, pwd) values('CT','raju', 'raju123')
insert into EmpDetails_1290881 values('Rajesh Kumar', 'CT', 'M', 10001)


create table EmpDetails_1290881(
ename varchar(20),
etype varchar(20) check (etype='NAE' or etype='CT'),
gender char check (gender='M' or gender='F'),
empid int foreign key references LoginCredit_1290881(eid) on delete cascade
)  

select * from LoginCredit_1290881
select * from EmpDetails_1290881
-----------------------------
NAE-->New account executive
CT--->Cashier/Teller
-----------------------------
drop table EmpDetails_1290881

create proc CheckCredit_1290881(@name varchar(20), @password varchar(20))
as
begin
	select eid,etype, count(*) from LoginCredit_1290881
	where uname=@name and pwd=@password
	group by eid,etype
end

create proc FetchEmpNameType(@eid int)
as
begin
	select ename,etype from EmpDetails_1290881
	where empid=@eid
end


exec FetchEmpNameType 10000


exec CheckCredit_1290881 'chandu', 'chandu123'

drop procedure CheckCredit_1290881

------------------------ Employee Related End --------------------------------------

------------------------------------- Customer Related Start -------------------------------------

create table Customer(
CustSSN numeric(9,0) unique,
custID numeric(9,0) identity(100000000,1) primary key,
CustName varchar(50),
CustAge int, 
AddrLine1 varchar(40), 
AddrLine2 varchar(40), 
CityName varchar(20), 
StateId int,
Pin numeric(6,0),
CustStatus varchar(10),
LastUpdateDate varchar(40) default getdate()
)

--alter table Customer alter column CustStatus varchar(10) default null

update Customer set StateId=105
where CustSSN=123654789

drop table Customer
insert into Customer values(123456789, 'rajesh', 24, 'hyd', 'hyd', 'hyd', 5, 123654, getdate())

select * from Customer

-- procedure to fecth customer data by ssn---
create proc GetCustDataBySsn(@ssn numeric(9,0))
as
begin
	select custID,CustSSN,CustName,CustAge,AddrLine1,AddrLine2,CityName,StateId,Pin
	from Customer
	where @ssn=CustSSN
end

--drop procedure GetCustDataBySsn
--procedure to fecth customer data by Id
create proc GetCustDataById(@id numeric(9,0))
as
begin
	select custID,CustSSN,CustName,CustAge,AddrLine1,AddrLine2,CityName,StateId,Pin
	from Customer
	where @id=custID
end

-- Procedure to update customer
alter proc UpdateCustomer(@id numeric(9,0), @name varchar(50), @age int, @addrLine1 varchar(40), @addrLine2 varchar(40), @city varchar(20), 
							@stateId int, @pin numeric(6,0))
as
begin
	update Customer set CustName=@name, CustAge=@age, AddrLine1=@addrLine1, AddrLine2=@addrLine2, 
	CityName=@city,StateId=@stateId,Pin=@pin, LastUpdateDate=getdate()
	where custID=@id;

	update CustomerMessage set msg='Customer Updated'
	where CustSSN=(select CustSSN from Customer where custID=@id);
end

select * from Customer

--drop procedure UpdateCustomer
--Creating cusomer						
alter proc CreateCustomer(@ssn numeric(9,0), @name varchar(50), @age int, @Addr1 varchar(40), @Addr2 varchar(40), 
							@City varchar(20), @StateId int, @Pin int, @customerId numeric out)
as
begin
	insert into Customer values(@ssn, @name, @age, @Addr1, @Addr2, @City, @StateId, @Pin, getdate(), 'Active');
	set @customerId=@@identity;

	insert into CustomerMessage values(@ssn, 'Customer Creation Initiated Successfully');
end

select * from CustomerMess
truncate table Account
select * from Customer
select * from Account

--drop procedure CreateCustomer

--Delete Customer by id
alter proc DeleteCustById(@id numeric(9,0))
as
begin
	if (select count(*) from Account where CustId=@id and AccStatus='Active' and AccType='S')=1
	begin
		insert into Transactions_BankRetailMS values((select AccId from Account where CustId=@id and AccStatus='Active' and AccType='S'),
													 (select Balance from Account where CustId=@id and AccStatus='Active' and AccType='S'),
													 getdate(),'W',0,0)
	end

	if (select count(*) from Account where CustId=@id and AccStatus='Active' and AccType='C')=1
	begin 
		insert into Transactions_BankRetailMS values((select AccId from Account where CustId=@id and AccStatus='Active' and AccType='C'),
													 (select Balance from Account where CustId=@id and AccStatus='Active' and AccType='C'),
													 getdate(),'W',0,0)
	end

	update Account set AccStatus='Inactive', Balance=0
	where CustId=@id;

	update accountStatus set accountMessage='Account Deleted', changeOccured=getdate()
	where CustId=@id;

	update CustomerMessage set msg='Customer Deleted'
	where CustSSN=(select CustSSN from Customer where custID=@id);

	update Customer set CustStatus='Inactive', LastUpdateDate=getdate()
	where custID=@id;
end

select * from Transactions_BankRetailMS
select * from Account
select * from Customer
select * from accountStatus

exec DeleteCustById 100000001
select * from Customer

update Customer set CustStatus='Active' where CustSSN=999999999

--Checking Existing customer by ssn
create proc checkExistingCustBySsn(@ssn numeric(9,0))
as
begin
	select count(*) from Customer
	where CustSSN=@ssn and CustStatus='Active'
end

--drop procedure checkExistingCustBySsn
--Checking Existing customer by customer id
create proc checkExistingCustByID(@id numeric(9,0))
as
begin
	select count(*) from Customer
	where custID=@id and CustStatus='Active'
end

drop procedure checkExistingCustBySsn
drop table Customer
select * from CustomerDetails_1290881

--------------------------------------- Customer Related End ---------------------------

----------------------------------  Accout Related Start -------------------------------

create table Account(
CustId numeric(9,0) foreign key references Customer(custID),
AccId numeric(9,0) identity(102365410,1) primary key,
AccType char check(AccType='S' or AccType='C'),
Balance numeric,
CrDate varchar(20),
CrLastDate varchar(20),
Duration numeric,
AccStatus varchar(10)
)


drop table Account

-- procedure to fetch Deleting account info by id
alter proc fetchDelAccDetailsById(@custId numeric(9,0))
as
begin
	select acc.AccId,acc.CustId,cust.CustName, acc.AccType,acc.Balance
	from Account acc inner join Customer cust
	on acc.CustId=cust.custID
	where cust.custID=@custId and acc.AccStatus='Active';
end

-- procedure to fetch Deleting account info by ssn
alter proc fetchDelAccDetailsBySsn(@ssn numeric(9,0))
as
begin
	select acc.AccId,acc.CustId,cust.CustName, acc.AccType,acc.Balance
	from Account acc inner join Customer cust
	on acc.CustId=cust.custID
	where acc.CustId=(select custID from Customer where CustSSN=@ssn) and acc.AccStatus='Active';
end


-- procedure to delete Account (Inactive)
alter proc DeleteAcc(@accId numeric(9,0))
as
begin
	update Account set AccStatus='Inactive'
	where AccId=@accId;

	update accountStatus set accountMessage='Account Deletion Initiated', changeOccured=getdate()
	where AccId=@accId;

	insert into Transactions_BankRetailMS values(@accId,(select Balance from Account where AccId=@accId), getdate(), 'W', 0,0);
end

drop proc fetchDelAccDetailsById
exec fetchDelAccDetailsBySsn 123456786
select * from Customer
select * from Account
select * from accountStatus
select * from Transactions_BankRetailMS
--alter table Account add AccStatus varchar(10)
--alter table Account
--add primary key (AccId)

--ALTER TABLE Account
--ADD FOREIGN KEY (CustId) REFERENCES Customer(custID);

update Customer set CustStatus='Active', LastUpdateDate=getdate()
where custID=100000000

-- procedure to create Account----
alter proc CreateAccount(@cId numeric(9,0), @accType char, @bal numeric, @accId numeric(9,0) out)
as
begin
	insert into Account values(@cId,@accType,@bal,getdate(),getdate(),10,'Active');	
	set @accId=@@identity;

	insert into accountStatus values(@cId,@accId,'Account Creation Initiated', getdate());

	insert into Transactions_BankRetailMS values(@accId,@bal,getdate(),'D', 0, 0);
end

drop procedure CreateAccount

--procedure to check existing account
alter proc GetExistingAcc(@custId numeric(9,0))
as
begin
	select AccType from Account
	where CustId=@custId and AccStatus='Active';
end

select * from Account
update Account set AccStatus='Active'
truncate table Account
drop procedure CreateAccount
select * from Customer


sp_help accountStatus

alter table accountStatus alter column changeOccured varchar(16) 

select * from accountStatus
select * from Account

-- procedure to get account status
alter proc fetchAccStatus
as
begin
	select accSt.CustId,accSt.AccId,acc.AccType, acc.AccStatus, accSt.accountMessage, accSt.changeOccured
	from accountStatus accSt inner join Account acc
	on accSt.AccId=acc.AccId
	where acc.AccStatus='Active'
end

truncate table accountStatus 
insert into accountStatus values(100000006,102365410,'Account created', getdate())

1	100000006	102365410	Account created	2017-03-23 11:52:21.2165214
2	100000006	102365410	Account created	2017-03-23 11:52:31.2168579
3	100000006	102365410	Account created	2017-03-23 12:06:56.6811918

exec fetchAccStatus

drop procedure fetchAccStatus

---------------------------------------------  Account Related End -------------------------------------

------------------------------------------- Transaction Related Start-----------------------
create table Transactions_1290881(
CustId numeric(9,0),
AccType char check(AccType='C' or AccType='S'),
amount numeric,
TransDate date,
SourceAccType char check(SourceAccType='C' or SourceAccType='S'),
TargetAccType char check(TargetAccType='C' or TargetAccType='S'),
)

------------------------------------------- Transaction Related End -----------------------


---------------------------------------------  State Related Start -----------------------------------
create table StateName(
StateId int identity(100,1),
Statename varchar(50)
)


drop table StateName
insert into StateName values('West Bengal')
SELECT * from StateName

create proc GetStates
as
begin
	select StateId, Statename from StateName
end

exec GetStates

-- get state name by state id
create proc GetStateNameByStateId(@id int)
as
begin
	select Statename from StateName
	where StateId=@id
end

----------------------------------------------  State Related End --------------------------------------

exec CheckCredit_1290881 'chandu', 'chandu123 '




create table CustomerMessage(
CustSSN numeric(9,0) unique FOREIGN KEY  REFERENCES Customer(CustSSN),
msg varchar(40)
)

alter proc checkLogin
as
begin
select Customer.custID,Customer.CustSSN,Customer.CustStatus,CustomerMessage.msg,Customer.LastUpdateDate
from Customer inner join CustomerMessage
on Customer.CustSSN=CustomerMessage.CustSSN
where Customer.CustStatus='Active';
end

truncate table Customer
drop table CustomerMessage 




----------------------------CMJ------------------------------------------

use db03tms368_1617

sp_helptext transferMoney

create proc checkAccountById
(
@id int
)
as
begin
		select COUNT(*) from Account where AccId=@id and AccStatus='Active';
end

select * from Account

update Account set AccStatus='Active' where AccId=102365414

exec checkAccountById 102365410

alter proc transferMoney
(
@AccId numeric(9,0),
@amount numeric,
@transactionType char,
@sourceAccount numeric(9,0),
@targetAccount numeric(9,0),
@transactionID int out
)
as
begin
	update Account set Balance= Balance-@amount
	where AccId=@sourceAccount;
	update Account set Balance= Balance+@amount
	where AccId=@targetAccount;
	insert into Transactions_BankRetailMS values(@AccId,abs(@amount),getdate(), @transactionType,@sourceAccount,@targetAccount);
	set @transactionID=@@identity;	
end